# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `batch-loader` gem.
# Please instead update this file by running `bin/tapioca gem batch-loader`.

# source://batch-loader//lib/batch_loader/version.rb#3
class BatchLoader
  # @return [BatchLoader] a new instance of BatchLoader
  #
  # source://batch-loader//lib/batch_loader.rb#21
  def initialize(item:, executor_proxy: T.unsafe(nil)); end

  # source://batch-loader//lib/batch_loader.rb#50
  def __sync; end

  # source://batch-loader//lib/batch_loader.rb#26
  def batch(default_value: T.unsafe(nil), cache: T.unsafe(nil), replace_methods: T.unsafe(nil), key: T.unsafe(nil), &batch_block); end

  # source://batch-loader//lib/batch_loader.rb#46
  def inspect; end

  # @return [Boolean]
  #
  # source://batch-loader//lib/batch_loader.rb#40
  def respond_to?(method_name, include_private = T.unsafe(nil)); end

  private

  # source://batch-loader//lib/batch_loader.rb#86
  def __ensure_batched; end

  # source://batch-loader//lib/batch_loader.rb#137
  def __executor_proxy; end

  # source://batch-loader//lib/batch_loader.rb#67
  def __loaded_value; end

  # source://batch-loader//lib/batch_loader.rb#100
  def __loader; end

  # source://batch-loader//lib/batch_loader.rb#132
  def __purge_cache; end

  # source://batch-loader//lib/batch_loader.rb#120
  def __replace_with!(value); end

  # source://batch-loader//lib/batch_loader.rb#116
  def __singleton_class; end

  # source://batch-loader//lib/batch_loader.rb#76
  def __sync!; end

  # source://batch-loader//lib/batch_loader.rb#72
  def method_missing(method_name, *args, &block); end

  class << self
    # source://batch-loader//lib/batch_loader.rb#17
    def for(item); end
  end
end

# source://batch-loader//lib/batch_loader/executor.rb#4
class BatchLoader::Executor
  # @return [Executor] a new instance of Executor
  #
  # source://batch-loader//lib/batch_loader/executor.rb#21
  def initialize; end

  # Returns the value of attribute items_by_block.
  #
  # source://batch-loader//lib/batch_loader/executor.rb#19
  def items_by_block; end

  # Returns the value of attribute loaded_values_by_block.
  #
  # source://batch-loader//lib/batch_loader/executor.rb#19
  def loaded_values_by_block; end

  class << self
    # source://batch-loader//lib/batch_loader/executor.rb#15
    def clear_current; end

    # source://batch-loader//lib/batch_loader/executor.rb#11
    def current; end

    # source://batch-loader//lib/batch_loader/executor.rb#7
    def ensure_current; end
  end
end

# source://batch-loader//lib/batch_loader/executor.rb#5
BatchLoader::Executor::NAMESPACE = T.let(T.unsafe(nil), Symbol)

# source://batch-loader//lib/batch_loader/executor_proxy.rb#6
class BatchLoader::ExecutorProxy
  # @return [ExecutorProxy] a new instance of ExecutorProxy
  #
  # source://batch-loader//lib/batch_loader/executor_proxy.rb#9
  def initialize(default_value, key, &block); end

  # source://batch-loader//lib/batch_loader/executor_proxy.rb#16
  def add(item:); end

  # Returns the value of attribute block.
  #
  # source://batch-loader//lib/batch_loader/executor_proxy.rb#7
  def block; end

  # Returns the value of attribute default_value.
  #
  # source://batch-loader//lib/batch_loader/executor_proxy.rb#7
  def default_value; end

  # source://batch-loader//lib/batch_loader/executor_proxy.rb#24
  def delete(items:); end

  # Returns the value of attribute global_executor.
  #
  # source://batch-loader//lib/batch_loader/executor_proxy.rb#7
  def global_executor; end

  # source://batch-loader//lib/batch_loader/executor_proxy.rb#20
  def list_items; end

  # source://batch-loader//lib/batch_loader/executor_proxy.rb#28
  def load(item:, value:); end

  # source://batch-loader//lib/batch_loader/executor_proxy.rb#32
  def loaded_value(item:); end

  # source://batch-loader//lib/batch_loader/executor_proxy.rb#44
  def unload_value(item:); end

  # @return [Boolean]
  #
  # source://batch-loader//lib/batch_loader/executor_proxy.rb#40
  def value_loaded?(item:); end

  private

  # source://batch-loader//lib/batch_loader/executor_proxy.rb#50
  def items_to_load; end

  # source://batch-loader//lib/batch_loader/executor_proxy.rb#54
  def loaded; end
end

# source://batch-loader//lib/batch_loader/graphql.rb#4
class BatchLoader::GraphQL
  # @return [GraphQL] a new instance of GraphQL
  #
  # source://batch-loader//lib/batch_loader/graphql.rb#53
  def initialize(item = T.unsafe(nil)); end

  # source://batch-loader//lib/batch_loader/graphql.rb#57
  def batch(**kwargs, &block); end

  # Sets the attribute batch_loader
  #
  # @param value the value to set the attribute batch_loader to.
  #
  # source://batch-loader//lib/batch_loader/graphql.rb#51
  def batch_loader=(_arg0); end

  # source://batch-loader//lib/batch_loader/graphql.rb#62
  def sync; end

  class << self
    # source://batch-loader//lib/batch_loader/graphql.rb#47
    def for(item); end

    # source://batch-loader//lib/batch_loader/graphql.rb#25
    def instrument(type, field); end

    # source://batch-loader//lib/batch_loader/graphql.rb#16
    def trace(event, _data); end

    # source://batch-loader//lib/batch_loader/graphql.rb#5
    def use(schema_definition); end

    # source://batch-loader//lib/batch_loader/graphql.rb#41
    def wrap(batch_loader); end

    private

    # source://batch-loader//lib/batch_loader/graphql.rb#35
    def wrap_with_warning(batch_loader); end
  end
end

# source://batch-loader//lib/batch_loader.rb#11
BatchLoader::IMPLEMENTED_INSTANCE_METHODS = T.let(T.unsafe(nil), Array)

# source://batch-loader//lib/batch_loader.rb#13
BatchLoader::LEFT_INSTANCE_METHODS = T.let(T.unsafe(nil), Array)

# source://batch-loader//lib/batch_loader/middleware.rb#4
class BatchLoader::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://batch-loader//lib/batch_loader/middleware.rb#5
  def initialize(app); end

  # source://batch-loader//lib/batch_loader/middleware.rb#9
  def call(env); end
end

# source://batch-loader//lib/batch_loader.rb#15
class BatchLoader::NoBatchError < ::StandardError; end

# source://batch-loader//lib/batch_loader.rb#12
BatchLoader::REPLACABLE_INSTANCE_METHODS = T.let(T.unsafe(nil), Array)

# source://batch-loader//lib/batch_loader/version.rb#4
BatchLoader::VERSION = T.let(T.unsafe(nil), String)
